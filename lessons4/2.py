# 2). Написать два алгоритма нахождения i-го по счёту простого числа. Функция нахождения простого числа должна принимать на вход натуральное и возвращать соответствующее простое число.
# Проанализировать скорость и сложность алгоритмов.
# Первый — с помощью алгоритма «Решето Эратосфена».
# Примечание. Алгоритм «Решето Эратосфена» разбирался на одном из прошлых уроков. Используйте этот код и попробуйте его улучшить/оптимизировать под задачу.
# Второй — без использования «Решета Эратосфена».
# Примечание. Вспомните классический способ проверки числа на простоту.
# Пример работы программ:
# sieve(2)
# 3
# prime(4)
# 7
# sieve(5)
# 11
# prime(1)
# 2
s = int(input())
x = 0
count = 0
p = 2
n = s * 2
a = [0] * n
for i in range(n):
    a[i] = i

a[1] = 0

m = 2
while m < n:
    if a[m] != 0:
        j = m * 2
        while j < n:
            a[j] = 0
            j = j + m
    m += 1



while p != a[-1]:
    x += 1
    for p in a:
        if p == 0:
            a.remove(a[p])


if a[-1] == 0:
    while m < s *2:
        if a[m] != 0:
            j = m * 2
            while j < s *2:
                a[j] = 0
                j = j + m
        m += 1
print(a[-1])

# без использования «Решета Эратосфена»
n = int(input('Input'))
lst = []
k = 0

for i in range(2, (n*2)):
    for j in range(2, i):
        if i % j == 0:
            k = k + 1
    if k == 0:
        lst.append(i)
    else:
        k = 0
print(lst)